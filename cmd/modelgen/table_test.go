package main

import (
	"encoding/json"
	"testing"

	"github.com/ovn-org/libovsdb/ovsdb"
	"github.com/stretchr/testify/assert"
)

func TestNewTableGenerator(t *testing.T) {
	rawSchema := []byte(`
	{
		"name": "AtomicDB",
		"version": "0.0.0",
		"tables": {
			"atomicTable": {
				"columns": {
					"str": {
						"type": "string"
					},
					"int": {
						"type": "integer"
					},
					"float": {
						"type": "real"
					}
				}
			}
		}
	}`)

	expected := `// Code generated by "ovsdb.modelgen"
// DO NOT EDIT.

package test

// test defines an object in test table
type test struct {
	UUID  string  ` + "`" + `ovs:"_uuid"` + "`" + `
	Float float64 ` + "`" + `ovs:"float"` + "`" + `
	Int   int     ` + "`" + `ovs:"int"` + "`" + `
	Str   string  ` + "`" + `ovs:"str"` + "`" + `
}
`

	var schema ovsdb.DatabaseSchema
	err := json.Unmarshal(rawSchema, &schema)
	if err != nil {
		t.Fatal(err)
	}
	table := schema.Tables["atomicTable"]
	gen := NewTableGenerator(
		"test",
		"test",
		&table,
	)

	for i := 0; i < 3; i++ {
		b, err := gen.Format()
		if err != nil {
			t.Fatal(err)
		}
		assert.Equal(t, expected, string(b))
	}
}

func TestFieldName(t *testing.T) {
	if s := FieldName("foo"); s != "Foo" {
		t.Fatalf("got %s, wanted Foo", s)
	}
}

func TestStructName(t *testing.T) {
	if s := StructName("Foo_Bar"); s != "FooBar" {
		t.Fatalf("got %s, wanted FooBar", s)
	}
}

/*
TODO: Write Test
func TestFieldType(t *testing.T) {
	tests := []struct {
		name string
		in   *ovsdb.ColumnSchema
		out  string
	}
	if got := FieldType(tt.args.column); got != tt.want {
		t.Errorf("FieldType() = %v, want %v", got, tt.want)
	}
}
*/

func TestAtomicType(t *testing.T) {
	tests := []struct {
		name string
		in   string
		out  string
	}{
		{"IntegerToInt", ovsdb.TypeInteger, "int"},
		{"RealToFloat", ovsdb.TypeReal, "float64"},
		{"BooleanToBool", ovsdb.TypeBoolean, "bool"},
		{"StringToString", ovsdb.TypeString, "string"},
		{"UUIDToString", ovsdb.TypeUUID, "string"},
		{"Invalid", "notAType", ""},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := AtomicType(tt.in); got != tt.out {
				t.Errorf("got %s, wanted %s", got, tt.out)
			}
		})
	}
}

func TestTag(t *testing.T) {
	if s := Tag("Foo_Bar"); s != "`ovs:\"Foo_Bar\"`" {
		t.Fatalf("got %s, wanted `ovs:\"Foo_Bar\"`", s)
	}
}

func TestFileName(t *testing.T) {
	if s := FileName("foo"); s != "foo.go" {
		t.Fatalf("got %s, wanted foo.go", s)
	}
}

func TestCamelCase(t *testing.T) {
	if s := camelCase("foo_bar_baz"); s != "FooBarBaz" {
		t.Fatalf("got %s, wanted FooBarBaz", s)
	}
}
